name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

env:
  GO_VERSION: '1.23'

jobs:
  # ========================================================================
  # Create Release
  # ========================================================================
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION=${{ github.event.inputs.version }}
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v4.3.1
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body: |
            ## Changes in ${{ steps.get_version.outputs.version }}

            ${{ steps.changelog.outputs.changelog }}

            ---

            ### Installation

            Download the appropriate binary for your platform from the assets below.

            ### Docker

            ```bash
            docker pull ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }}
            ```

            ### Checksums

            See `checksums.txt` for file verification.
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.version, '-rc') || contains(steps.get_version.outputs.version, '-beta') || contains(steps.get_version.outputs.version, '-alpha') }}

  # ========================================================================
  # Build Multi-Platform Binaries
  # ========================================================================
  build-binaries:
    name: Build ${{ matrix.goos }}-${{ matrix.goarch }}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: create-release
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          # Exclude combinations that don't make sense
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          VERSION=${{ needs.create-release.outputs.version }}
          BINARY_NAME=stream-${GOOS}-${GOARCH}
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi

          go build \
            -v \
            -trimpath \
            -ldflags="-s -w -X main.Version=${VERSION} -X main.BuildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.GitCommit=$(git rev-parse --short HEAD)" \
            -o ${BINARY_NAME} \
            .

          # Create archive
          if [ "$GOOS" = "windows" ]; then
            zip stream-${GOOS}-${GOARCH}.zip ${BINARY_NAME} README.md LICENSE || true
            echo "ASSET_NAME=stream-${GOOS}-${GOARCH}.zip" >> $GITHUB_ENV
          else
            tar czf stream-${GOOS}-${GOARCH}.tar.gz ${BINARY_NAME} README.md LICENSE || tar czf stream-${GOOS}-${GOARCH}.tar.gz ${BINARY_NAME}
            echo "ASSET_NAME=stream-${GOOS}-${GOARCH}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ env.ASSET_NAME }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/octet-stream

  # ========================================================================
  # Generate Checksums
  # ========================================================================
  checksums:
    name: Generate Checksums
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [create-release, build-binaries]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v6

      - name: Generate checksums
        run: |
          find . -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec sha256sum {} \; > checksums.txt
          cat checksums.txt

      - name: Upload checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain

  # ========================================================================
  # Build and Push Docker Image
  # ========================================================================
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.create-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.create-release.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.create-release.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.create-release.outputs.version }}
            BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
            GIT_COMMIT=$(git rev-parse --short HEAD)

  # ========================================================================
  # Post-Release Tasks
  # ========================================================================
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [create-release, build-binaries, checksums, docker]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update latest tag
        if: "!contains(needs.create-release.outputs.version, '-')"
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -f latest
          git push -f origin latest

      - name: Notify release
        run: |
          echo "Release ${{ needs.create-release.outputs.version }} completed successfully!"
          echo "Docker image: ghcr.io/${{ github.repository }}:${{ needs.create-release.outputs.version }}"
