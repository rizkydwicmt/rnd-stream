name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

env:
  GO_VERSION: '1.23'

jobs:
  # ========================================================================
  # Create Release
  # ========================================================================
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION=${{ github.event.inputs.version }}
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v4.3.1
        continue-on-error: true
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body: |
            ## Changes in ${{ steps.get_version.outputs.version }}

            ${{ steps.changelog.outputs.changelog || 'Initial release with CI/CD pipeline, stream-based ticket processing, and Docker automation.' }}

            ---

            ### Docker Installation

            Pull and run the Docker image:

            ```bash
            # Pull the image
            docker pull ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }}

            # Or with podman
            podman pull ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }}

            # Run the container
            docker run -d -p 8080:8080 ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }}
            ```

            Supports: `linux/amd64`, `linux/arm64`
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.version, '-rc') || contains(steps.get_version.outputs.version, '-beta') || contains(steps.get_version.outputs.version, '-alpha') }}

  # ========================================================================
  # Build and Push Docker Image
  # ========================================================================
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.create-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.create-release.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.create-release.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.create-release.outputs.version }}
            BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
            GIT_COMMIT=$(git rev-parse --short HEAD)

  # ========================================================================
  # Post-Release Tasks
  # ========================================================================
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [create-release, docker]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update latest tag
        if: "!contains(needs.create-release.outputs.version, '-')"
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -f latest
          git push -f origin latest

      - name: Notify release
        run: |
          echo "Release ${{ needs.create-release.outputs.version }} completed successfully!"
          echo "Docker image: ghcr.io/${{ github.repository }}:${{ needs.create-release.outputs.version }}"
