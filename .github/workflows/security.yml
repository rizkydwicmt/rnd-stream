name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

env:
  GO_VERSION: '1.23'

jobs:
  # ========================================================================
  # GoSec - Security Scanner
  # ========================================================================
  gosec:
    name: GoSec Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail ./...'

  # ========================================================================
  # Dependency Vulnerability Scanning
  # ========================================================================
  govulncheck:
    name: Go Vulnerability Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Run govulncheck
        run: govulncheck ./...

  # ========================================================================
  # Nancy - Dependency Vulnerability Scanner (Optional - can be unstable)
  # ========================================================================
  # nancy:
  #   name: Nancy Dependency Scanner
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v5

  #     - name: Set up Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: ${{ env.GO_VERSION }}
  #         cache: true

  #     - name: Write Go List
  #       run: go list -json -deps ./... > go.list

  #     - name: Run Nancy
  #       uses: sonatype-nexus-community/nancy-github-action@main
  #       continue-on-error: true
  #       with:
  #         nancyCommand: sleuth --path go.list

  # ========================================================================
  # Trivy - Comprehensive Security Scanner
  # ========================================================================
  trivy:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

  # ========================================================================
  # CodeQL Analysis (Advanced Security) - Disabled for public repos
  # Enable when repository has GitHub Advanced Security
  # ========================================================================
  # codeql:
  #   name: CodeQL Analysis
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 20
  #   permissions:
  #     actions: read
  #     contents: read
  #     security-events: write
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       language: [ 'go' ]
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v5

  #     - name: Set up Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: ${{ env.GO_VERSION }}
  #         cache: true

  #     - name: Initialize CodeQL
  #       uses: github/codeql-action/init@v3
  #       with:
  #         languages: ${{ matrix.language }}
  #         queries: security-and-quality

  #     - name: Autobuild
  #       uses: github/codeql-action/autobuild@v3

  #     - name: Perform CodeQL Analysis
  #       uses: github/codeql-action/analyze@v3
  #       with:
  #         category: "/language:${{matrix.language}}"

  # ========================================================================
  # Secrets Scanning
  # ========================================================================
  gitleaks:
    name: Gitleaks Secret Scanner
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # ========================================================================
  # License Compliance Check
  # ========================================================================
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install go-licenses
        run: go install github.com/google/go-licenses@latest

      - name: Check licenses
        run: |
          go-licenses check ./... --disallowed_types=forbidden,restricted

      - name: Save license report
        run: |
          go-licenses report ./... > licenses.csv

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.csv
          retention-days: 30

  # ========================================================================
  # Security Status Check
  # ========================================================================
  security-success:
    name: Security Success
    runs-on: ubuntu-latest
    needs: [gosec, govulncheck, trivy, gitleaks, license-check]
    if: always()
    steps:
      - name: Check all security jobs status
        run: |
          if [[ "${{ needs.gosec.result }}" == "failure" ]] || \
             [[ "${{ needs.govulncheck.result }}" == "failure" ]] || \
             [[ "${{ needs.trivy.result }}" == "failure" ]] || \
             [[ "${{ needs.gitleaks.result }}" == "failure" ]] || \
             [[ "${{ needs.license-check.result }}" == "failure" ]]; then
            echo "One or more security scans failed"
            exit 1
          fi
          echo "All security scans passed"
