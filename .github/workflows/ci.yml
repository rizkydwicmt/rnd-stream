name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

# Cancel in-progress runs for the same workflow and branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: '1.23'

jobs:
  # ========================================================================
  # Code Quality & Linting
  # ========================================================================
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m --config=.golangci.yml
          skip-cache: false
          skip-pkg-cache: false
          skip-build-cache: false

      - name: Check go mod tidy
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

      - name: Check formatting
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "Go code is not formatted:"
            gofmt -d .
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

  # ========================================================================
  # Unit Tests with Matrix Strategy
  # ========================================================================
  test:
    name: Test (Go ${{ matrix.go-version }} / ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.23']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.txt
          flags: unittests-${{ matrix.os }}-go${{ matrix.go-version }}
          name: codecov-${{ matrix.os }}-go${{ matrix.go-version }}
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # ========================================================================
  # Benchmarks
  # ========================================================================
  benchmark:
    name: Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run benchmarks
        run: go test -bench=. -benchmem -benchtime=100000x ./... | tee benchmark.txt

      - name: Store benchmark result
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark.txt
          retention-days: 30

      - name: Compare benchmarks
        if: github.event_name == 'pull_request'
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'go'
          output-file-path: benchmark.txt
          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-on-alert: true
          alert-threshold: '150%'
          fail-on-alert: false

  # ========================================================================
  # Build Verification
  # ========================================================================
  build:
    name: Build (Go ${{ matrix.go-version }} / ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.23']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Build application
        run: go build -v -ldflags="-s -w" -o bin/stream .

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: stream-${{ matrix.os }}-go${{ matrix.go-version }}
          path: bin/
          retention-days: 7

  # ========================================================================
  # Integration Tests (if applicable)
  # ========================================================================
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [test, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run integration tests
        run: |
          if [ -d "tests/integration" ]; then
            go test -v -tags=integration ./tests/integration/...
          else
            echo "No integration tests found, skipping..."
          fi

  # ========================================================================
  # Code Coverage Report
  # ========================================================================
  coverage:
    name: Code Coverage Report
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Generate coverage report
        run: |
          go test -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Calculate coverage percentage
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: $COVERAGE%"
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html
          retention-days: 30

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const coverage = process.env.COVERAGE;
            const body = `### Code Coverage Report\n\n**Total Coverage:** ${coverage}%\n\nâœ… Coverage report generated successfully.`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # ========================================================================
  # Status Check (required for branch protection)
  # ========================================================================
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, test, build, benchmark, coverage]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.lint.result }}" == "failure" ]] || \
             [[ "${{ needs.test.result }}" == "failure" ]] || \
             [[ "${{ needs.build.result }}" == "failure" ]] || \
             [[ "${{ needs.benchmark.result }}" == "failure" ]] || \
             [[ "${{ needs.coverage.result }}" == "failure" ]]; then
            echo "One or more jobs failed"
            exit 1
          fi
          echo "All jobs succeeded"
